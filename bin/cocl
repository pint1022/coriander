#!/bin/bash

if [ ! -z "$SETX" ]; then {
   set -x
} fi

echo cocl args: $@

set -e

export ADDFLAGS=
export NATIVE_COMPILER=g++
export SO_SUFFIX=.so
case `uname` in
    Darwin)
        ADDFLAGS="-stdlib=libc++"
        export NATIVE_COMPILER=clang++
        export SO_SUFFIX=.dylib
        ;;
    *)
        ;;
esac

SCRIPT_DIR=$( cd "$( dirname "$0" )" && pwd )
export COCL_HOME=$(dirname ${SCRIPT_DIR})

if [[ x${COCL_BIN} == x ]]; then {
    if [ -f ${COCL_HOME}/bin/patch_hostside ]; then {
        export COCL_BIN=${COCL_HOME}/bin
        export COCL_LIB=${COCL_HOME}/lib
    } else {
        export COCL_BIN=${PWD}
        export COCL_LIB=${PWD}
    } fi
} fi

# Using this weird bash, compared to other possibilities because:
# - getopts cant handle long options
# - would rather not make cocl dependent on python (although I know that tensorflow already is)
# - getopt non-gnu cant handle long options either
# - getopt gnu is not the default on Mac
# I *hope* that bash is fairly portable, across Linux, Mac, cygwin/msys64?

display_help () {
    cat <<EOF

    Usage: cocl [options] <targetfile>
      -c compile to .o only, dont link
      -o final output filepath
      --clang-home Path to llvm4.0

      Device IR optimization options
         These are applied to the device IR generation step
         This is before the OpenCL generation step
         These options strongly affect the success or not of the OpenCL generation step
         They will also affect the 'look' of the final OpenCL, which will influence whether
         different GPU drivers can read it, and probably affects final execution speed
         Optimization at this point is not important for speed, but does affect how
         easy the resulting IR is to parse, and convert to OpenCL
         Too much optimization makes the code long, and branching hard to disentangle
         Too little optimization causes lots of memory allocaiton/free, which invariably
         makes it hard to handle address spaces

         These options will mostly be passed through to opt-3.8

          -devicell-opt [OPTION]
             Passed through to opt-3.8

           Examples:

         --devicell-opt inline
             Try to inline OpenCL functions
             Generally required, otherwise you'll get errors about address space mismatch

         --devicell-opt mem2reg
             Try to convert heap allocations to registers
             Generally required, otherwise you'll get errors about address space mismatch

          -devicell-opt instcombine
             Pass to combine instructions where possible
             This generally has no downsides.  You want this :-)

          -devicell-opt O3
          -devicell-opt O2
          -devicell-opt O1
          -devicell-opt O0
             Set various standard optimization levels
             O0 works, as long as you set inline, mem2reg and instcombine
             O1 and O2 are probably good options in general
             O3 produces really long, gnarly llvm code, that is harder for the opencl generation
             pass to deal with

      OpenCL generation options:

        --add_ir_to_cl
             Add the original IR code into the generated OpenCL code, as comments
             Mainly useful to coriander maintainers

      Options passed through to clang compiler:
        -fPIC
        -I<INCLUDEDIR>
        -D<SYMBOL>[=<VALUE>]
        -g

      Options ignored currently:
        -O
        -G
        -U
        -M
        -x <something>
        -iquote <something>
        -isystem <something>
        -compiler-options <something>
        -fno-canonical-system-headers
        -std<something>
        -compiler-bindir
        -gencode

EOF
}

PASSTHRU=
export IROOPENCLARGS=
export DEVICELLOPT=
while [ "x$1" != x ]; do {
    THISARG=$(echo $1 | cut -d = -f 1)
    DONE=0
    TWOLETTERS=$(echo $1 | cut -c 1-2)
    case "${TWOLETTERS}" in
        \;)
           # ignore (artifact of cmake file hacking...
           DONE=1
           ;;
        -I)
            # echo got include
            # need to check if theres a space or not
            if [ $1 = -I ]; then {
                INCLUDES="$INCLUDES -I$2"
                shift
            } else {
                THESEINCLUDES=$(echo $1 | sed -e 's/;/ /g')
                for THISINCLUDE in ${THESEINCLUDES}; do {
                    INCLUDES="${INCLUDES} ${THISINCLUDE}"
                } done
            } fi
            DONE=1
            ;;
        -D)
            # hacktastic :-D. Would be better to fix the cmake rules, sooner or later...
            DSTRIPPED=$(echo $1 | sed -e 's/-D-D/-D/')
            PASSTHRU="$PASSTHRU $DSTRIPPED"
            DONE=1
            ;;
        -O)
            # ignore...
            DONE=1
            ;;
        -G)
            # PASSTHRU="$PASSTHRU $1"
            # ignore
            DONE=1
            ;;
        -U)
            # PASSTHRU="$PASSTHRU $1"
            DONE=1
            ;;
        -x)
            # not sure why we are receiving -x cu? ignore for now
            shift
            DONE=1
            ;;
         *)
            ;;
    esac
    if [ $DONE != 1 ]; then {
        # echo THISARG ${THISARG}
        case ${THISARG} in
            -M)
                # not sure what this is, but it suppresses device IR generation...
                # => ignore
                # PASSTHRU="$PASSTHRU -M"
                ;;
            # -I)
            #    INCLUDES="$INCLUDES $1"
            #     ;;
            -c)
                COMPILE=1
                ;;
            -g)
                OPT_G=-g
                # ignore, so we dont get llvm stuff everywehere...
                ;;
            -o)
                OUTPATH=$2
                shift
                ;;
            -iquote)
                # PASSTHRU="$PASSTHRU $1 $2"
                shift
                ;;
            --clang-home)
                CLANG_HOME=$2
                shift
                ;;
            -isystem)
                # PASSTHRU="$PASSTHRU $1 $2"
                shift
                ;;
             --devicell-opt)
                if [ x$2 = x ]; then {
                    echo Please provide a value for -devicell-opt
                    exit 1
                } fi
                DEVICELLOPT="${DEVICELLOPT} -$2"
                shift
                ;;
            --add_ir_to_cl)
                IROOPENCLARGS="${IROOPENCLARGS} $1"
                ;;
            -?)
                display_help
                exit 0
                ;;
            -h)
                display_help
                exit 0
                ;;
            --help)
                display_help
                exit 0
                ;;
            -gencode)
                # echo ignoring -gencode
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            --compiler-bindir)
                # echo ignoring --compiler-bindir
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            -ferror-limit)
                PASSTHRU="$PASSTHRU $1"
                ;;
            -fPIC)
                PASSTHRU="$PASSTHRU $1"
                ;;
            -fno-canonical-system-headers)
                # echo ignoring -fno-canonical-system-headers
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            --compiler-options)
                # echo ignoring --compiler-options
                shift
                # echo ignoring compiler-options
                # clang doesnt like this => ignore
                # PASSTHRU="$PASSTHRU $1"
                ;;
            -std)
                # echo got -std
                # PASSTHRU="$PASSTHRU $1"
                ;;
            *)
                # echo adding $1 as input file
                if [ x$INFILES != x ]; then {
                    INFILES="$INFILES $1"
                } else {
                    INFILES="$1"
                } fi
                ;;
        esac
    } fi
    # esac
    # echo new passthru $PASSTHRU
    # echo doing shift
    shift
} done

if [ x$CLANG_HOME = x ]; then {
    echo
    echo Please set CLANG_HOME, eg on Ubuntu you might do:
    echo 
    echo     export CLANG_HOME=/usr/local/opt/llvm-4.0
    echo
    exit 1
} fi
export CLANG=clang++

INPATH=${INFILES}

export INCLUDES

if [ "x$INPATH" = "x" ]; then {
    echo Usage: $0 [-c] [-g] [[-Iincludepath]...] [-o outfile] [infile.cu]
    exit 1
} fi

# since tf feeds us weird postfixes like '.cu.cc' ,and '.cu.pic.d' (is that a foldername? unclear for now...), so
# we need to do something more robust than just assume the files end in '.cu' or '.o'
# so, we'll do a bash string split

# gets a file basename and postfix, for unknown postfix
# output: BASEPATH POSTFIX
# eg input: foo/bar/somefile.cu.cc
# outputs will be:
# BASEPATH=foo/bar/somefile
# POSTFIX=.cu.cc
split_path () {
    DIRNAME=$(dirname $1)
    BASENAME=$(basename $1)

    BASEARR0=$(echo $BASENAME | cut -d . -f 1)
    BASEPATH=${DIRNAME}/${BASEARR0}

    ARGREST=$(echo $BASENAME | cut -s -d . -f 2-)
    if [ x$ARGREST != x ]; then {
        ARGREST=.${ARGREST}
    } fi
    POSTFIX=$ARGREST
}

split_path ${INPATH}
INPUTBASEPATH=${BASEPATH}
INPUTPOSTFIX=${POSTFIX}

if [ $OUTPATH ]; then {
    OUTFILE=${OUTPATH}
} else {
    if [ x$COMPILE = x1 ]; then {
        OUTFILE=${INPUTBASEPATH}.o
    } else {
        OUTFILE=${INPUTBASEPATH}
    } fi
} fi

split_path ${OUTFILE}
OUTPUTBASEPATH=${BASEPATH}
OUTPUTPOSTFIX=${POSTFIX}

if [ x${NOCOCLREBUILD} = x ]; then {
    (cd ${COCL_HOME}
         # make
    )
} fi

if [ ! "$COMPILE" ]; then {
    FINALPOSTFIX=${OUTPUTPOSTFIX}
    OUTPUTPOSTFIX=.o
} fi


LLVM_COMPILE_FLAGS=`${CLANG_HOME}/bin/llvm-config --cppflags --cxxflags | sed -e 's/ -fno-exceptions/ -fexceptions/g' -e 's/ -fno-rtti//g' -e 's/ -DNDEBUG//g' -e 's/ -g / /g' -e 's/ -std=c++0x/ -std=c++11/g' -e 's% -isysroot [^ ]*%%g'`
LLVM_COMPILE_FLAGS=${LLVM_COMPILE_FLAGS//-Wno-maybe-uninitialized/}

# we're going to use LLVM_LL_COMPILE_FLAGS for linking
# technically, we should be using LLVM_LINK_FLAGS for that, but that seems to
# not have the libraries we need, though that might be fixable (and thus clearn)
LLVM_LL_COMPILE_FLAGS=$(echo " ${LLVM_COMPILE_FLAGS} " | sed -e 's/-I *[^ ]*/ /g')
LLVM_LINK_FLAGS=`${CLANG_HOME}/bin/llvm-config --ldflags --system-libs --libs all`

OUTDIR=$(dirname ${OUTFILE})
if [[ ! -d ${OUTDIR} ]]; then {
    echo making output folder ${OUTDIR}
    (
        set -x
        mkdir -p ${OUTDIR}
    )
} fi

(
    set -x
    ${CLANG_HOME}/bin/clang++ ${PASSTHRU} -DUSE_CLEW \
        -std=c++11 -x cuda \
        -D__CORIANDERCC__ \
        --cuda-gpu-arch=sm_30 -nocudalib -nocudainc --cuda-device-only -emit-llvm -O0 -S \
        ${ADDFLAGS} \
        -D__CUDACC__ \
        -Wno-gnu-anonymous-struct \
        -Wno-nested-anon-types \
        ${LLVM_COMPILE_FLAGS} \
        -I${COCL_HOME}/include/EasyCL \
        -I${COCL_HOME}/include/cocl \
        -I${COCL_HOME}/src \
        -I${COCL_HOME}/src/EasyCL \
        -I${COCL_HOME}/src/EasyCL/thirdparty/clew/include \
        -include ${COCL_HOME}/include/cocl/cocl.h \
        -include ${COCL_HOME}/include/cocl/fake_funcs.h \
        -include ${COCL_HOME}/include/cocl/cocl_deviceside.h \
        -I${COCL_HOME}/include \
        ${INCLUDES} \
        ${INPUTBASEPATH}${INPUTPOSTFIX} -o ${OUTPUTBASEPATH}-device-noopt.ll
)

(
    set -x
    ${CLANG_HOME}/bin/opt ${DEVICELLOPT} -S \
        -o ${OUTPUTBASEPATH}-device.ll \
        ${OUTPUTBASEPATH}-device-noopt.ll
)

(
    set -x
    ${CLANG_HOME}/bin/clang++ ${PASSTHRU} \
        ${INCLUDES} -DUSE_CLEW \
        -std=c++11 -x cuda -nocudainc --cuda-host-only -emit-llvm  -O3 -S \
        ${OPT_G} \
        -D__CUDACC__ \
        -D__CORIANDERCC__ \
        -Wno-gnu-anonymous-struct \
        -Wno-nested-anon-types \
        ${LLVM_COMPILE_FLAGS} \
        -I${COCL_HOME}/include \
        -I${COCL_HOME}/include/EasyCL \
        -I${COCL_HOME}/include/cocl \
        -I${COCL_HOME}/src \
        -I${COCL_HOME}/src/EasyCL/thirdparty/clew/include \
        -I${COCL_HOME}/src/EasyCL \
        ${ADDFLAGS} \
        ${LLVM_COMPILE_FLAGS} \
        -include ${COCL_HOME}/include/cocl/cocl.h \
        -include ${COCL_HOME}/include/cocl/fake_funcs.h \
        -include ${COCL_HOME}/include/cocl/cocl_hostside.h \
        ${INPUTBASEPATH}${INPUTPOSTFIX} \
        -o ${OUTPUTBASEPATH}-hostraw.ll
)

(
    set -x
    ${COCL_BIN}/patch_hostside \
        --hostrawfile ${OUTPUTBASEPATH}-hostraw.ll \
        --devicellfile ${OUTPUTBASEPATH}-device.ll \
        --hostpatchedfile ${OUTPUTBASEPATH}-hostpatched.ll
)

(
    set -x
    ${CLANG_HOME}/bin/clang++ \
        ${PASSTHRU} \
        ${LLVM_LL_COMPILE_FLAGS} \
        -DUSE_CLEW \
        -O3 \
        ${OPT_G} \
        -c ${OUTPUTBASEPATH}-hostpatched.ll \
        -o ${OUTPUTBASEPATH}${OUTPUTPOSTFIX}
)

if [ ! "$COMPILE" ]; then {
    (
        set -x
        ${NATIVE_COMPILER} \
            -Wl,-rpath,${COCL_LIB} \
            -Wl,-rpath,$$ORIGIN \
            ${OPT_G} \
            -o ${OUTPUTBASEPATH}${FINALPOSTFIX} ${OUTPUTBASEPATH}${OUTPUTPOSTFIX} \
            -L${COCL_LIB} -lcocl -lclblast -leasycl -lclew -lpthread \
            ${LLVM_LINK_FLAGS}
    )
} fi
